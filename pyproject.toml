[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "jarvis-voice-assistant"
dynamic = ["version"]
description = "An AI-powered voice assistant with face authorization and multiple AI integrations"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jarvis Voice Assistant Team", email = "your-email@example.com"}
]
maintainers = [
    {name = "Jarvis Voice Assistant Team", email = "your-email@example.com"}
]
keywords = [
    "voice-assistant",
    "ai",
    "speech-recognition",
    "text-to-speech",
    "face-recognition",
    "personal-assistant",
    "automation",
    "linux"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pillow>=8.3.0",
    "opencv-python>=4.5.0",
    "ffmpeg-python>=0.2.0",
    "python-dotenv>=0.19.0",
    "torch>=1.9.0",
    "transformers>=4.11.0",
    "sentence-transformers>=2.0.0",
    "clip>=1.0.0",
    "pydub>=0.25.1",
    "librosa>=0.8.1",
    "aiohttp>=3.8.0",
    "google-cloud-translate>=3.0.0",
    "openai>=0.27.0",
    "tqdm>=4.62.0",
    "requests>=2.26.0",
    "python-magic>=0.4.24",
    "gTTS",
    "psutil",
    "pyjokes",
    "PyMuPDF",
    "markdown",
    "wikipedia",
    "opencv-python-headless",
    "schedule",
    "whisper",
    "sounddevice",
    "scipy",
    "googlesearch-python",
    "duckduckgo-search",
    "vosk",
    "SpeechRecognition",
    "webrtcvad",
    "face_recognition",
    "black",
    "flask",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/jarvis-voice-assistant"
Documentation = "https://github.com/yourusername/jarvis-voice-assistant#readme"
Repository = "https://github.com/yourusername/jarvis-voice-assistant.git"
"Bug Tracker" = "https://github.com/yourusername/jarvis-voice-assistant/issues"
"Source Code" = "https://github.com/yourusername/jarvis-voice-assistant"

[project.scripts]
jarvis = "main:main"

[tool.setuptools]
packages = ["faceAuthorization"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.json"]

[tool.setuptools.dynamic]
version = {attr = "jarvis_voice_assistant.__version__"}

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["jarvis_voice_assistant"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["jarvis_voice_assistant"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 